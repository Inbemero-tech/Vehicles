# ============================================
# üöó Vehicle Market Analysis Dashboard
# ============================================

import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

# ==============================
# CONFIGURACI√ìN INICIAL
# ==============================
st.set_page_config(
    page_title="An√°lisis de Veh√≠culos en Venta - EE. UU.",
    layout="wide",
    page_icon="üöó"
)

st.title("üöó An√°lisis de Veh√≠culos en Venta en EE. UU.")
st.markdown("""
Explora los datos de veh√≠culos en venta, filtra por tipo o condici√≥n, 
y analiza las tendencias de precios, kilometraje y m√°s.
""")

# ==============================
# CARGA DE DATOS
# ==============================


@st.cache_data
def load_data():
    try:
        df = pd.read_csv("vehicles_us_clean.csv")
        st.success("‚úÖ Datos cargados correctamente")
        return df
    except FileNotFoundError:
        st.error(
            "‚ùå No se encontr√≥ el archivo 'vehicles_us_clean.csv'. Verifica la ruta.")
        return pd.DataFrame()


df = load_data()
if df.empty:
    st.stop()

# ==============================
# SIDEBAR DE FILTROS
# ==============================
st.sidebar.header("üîç Filtros de Exploraci√≥n")

type_filter = st.sidebar.multiselect(
    "Tipo de veh√≠culo:",
    options=df["type"].unique(),
    default=df["type"].unique()
)

condition_filter = st.sidebar.multiselect(
    "Condici√≥n:",
    options=df["condition"].unique(),
    default=df["condition"].unique()
)

filtered_df = df[
    (df["type"].isin(type_filter)) &
    (df["condition"].isin(condition_filter))
]

year_range = st.sidebar.slider(
    "Rango de a√±os:",
    int(df["model_year"].min()),
    int(df["model_year"].max()),
    (int(df["model_year"].min()),
     int(df["model_year"].max())))

price_range = st.sidebar.slider(
    "Rango de precios:",
    int(df["price"].min()),
    int(df["price"].max()),
    (int(df["price"].min()),
     int(df["price"].max())))


# ==============================
# RESUMEN GENERAL DEL MERCADO
# ==============================
st.header("üìä Resumen general del mercado")
st.markdown("Los indicadores muestran una visi√≥n r√°pida del estado actual del mercado con base en los filtros aplicados.")

filtered_df = df[
    (df["type"].isin(type_filter)) &
    (df["condition"].isin(condition_filter)) &
    (df["model_year"].between(year_range[0], year_range[1])) &
    (df["price"].between(price_range[0], price_range[1]))
]

col1, col2, col3, col4 = st.columns(4)
col1.metric("Veh√≠culos disponibles", len(filtered_df))
col2.metric("Precio promedio", f"${filtered_df['price'].mean():,.0f}")
col3.metric("A√±o promedio", int(filtered_df["model_year"].mean()))
col4.metric("Km promedio", f"{filtered_df['odometer'].mean():,.0f}")


# ==============================
# TABLA INTERACTIVA COMPLETA
# ==============================
st.markdown("## üìã Conjunto de Datos Completo")
st.markdown("""
Puedes desplazarte horizontal y verticalmente para explorar todos los registros disponibles.
Usa los filtros en la barra lateral para actualizar la tabla en tiempo real.
""")

# Mostramos toda la tabla con scroll
st.dataframe(
    filtered_df,
    use_container_width=True,
    height=400
)

# ==============================
# SECCI√ìN: VISUALIZACIONES
# ==============================
st.header("üìä Visualizaciones")
st.markdown("Analiza la distribuci√≥n de precios, la relaci√≥n entre a√±o y kilometraje, y los promedios por tipo de veh√≠culo.")

tab1, tab2, tab3 = st.tabs(
    ["üí∞ Distribuci√≥n de precios", "üìÖ A√±o del modelo vs Precio", "üöô Precio promedio por tipo"])

# --- Histograma de precios ---
with tab1:
    st.markdown("""
    El siguiente histograma muestra c√≥mo se distribuyen los precios de los veh√≠culos filtrados. 
    Permite observar concentraciones de valores y detectar posibles outliers.
    """)
    fig_price = px.histogram(
        filtered_df, x="price", nbins=50, color_discrete_sequence=["#76b5c5"]
    )
    fig_price.update_layout(xaxis_title="Precio (USD)",
                            yaxis_title="Frecuencia")
    st.plotly_chart(fig_price, use_container_width=True)
    st.info("üìä *La mayor√≠a de los veh√≠culos se concentran en el rango de precios bajos a medios, con una minor√≠a que representa autos de lujo o nuevos.*")

# --- Gr√°fico de dispersi√≥n ---
with tab2:
    st.markdown("""
    Cada punto representa un veh√≠culo. 
    Podr√°s notar c√≥mo los precios tienden a disminuir a medida que el kilometraje aumenta.
    """)
    fig_scatter = px.scatter(
        filtered_df,
        x="odometer",
        y="price",
        color="type",
        hover_data=["model_year", "condition"],
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    fig_scatter.update_layout(
        xaxis_title="Kilometraje (millas)", yaxis_title="Precio (USD)")
    st.plotly_chart(fig_scatter, use_container_width=True)
    st.info("üöò *En general, los veh√≠culos m√°s recientes tienen precios m√°s altos, mientras que el kilometraje elevado tiende a reducir su valor.*")

# --- Gr√°fico de barras ---
with tab3:
    st.markdown("""
    Este gr√°fico de barras muestra el precio promedio de los veh√≠culos seg√∫n su tipo. 
    Permite comparar r√°pidamente qu√© tipos de veh√≠culos son m√°s costosos en promedio.
    """)
    avg_price_type = filtered_df.groupby("type")["price"].mean().reset_index()
    fig_bar = px.bar(
        avg_price_type,
        x="type",
        y="price",
        color="type",
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    fig_bar.update_layout(
        xaxis_title="Tipo de veh√≠culo", yaxis_title="Precio promedio (USD)")
    st.plotly_chart(fig_bar, use_container_width=True)
    st.info("üß© *Los tipos de veh√≠culos m√°s costosos suelen ser SUV y camionetas, mientras que los sedanes y compactos dominan el segmento m√°s econ√≥mico.*")

# ==============================
# SECCI√ìN: AN√ÅLISIS CORRELACIONAL
# ==============================
st.markdown("## üîç An√°lisis Correlacional")

st.markdown("""
El mapa de calor muestra las relaciones entre las variables num√©ricas.\n 
Los valores cercanos a 1 o -1 indican relaciones fuertes (positivas o negativas).\n
Ejemplos:
- Precio y A√±o del modelo: Positiva (veh√≠culos m√°s nuevos tienden a ser m√°s caros)
- Precio y Kilometraje: Negativa (mayor kilometraje suele reducir el precio)
""")

corr = filtered_df[["price", "model_year", "odometer", "days_listed"]].corr()
corr.columns = ["Precio", "A√±o Modelo", "Kilometraje", "D√≠as Publicado"]
corr.index = ["Precio", "A√±o Modelo", "Kilometraje", "D√≠as Publicado"]

fig, ax = plt.subplots(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap="Blues", ax=ax)
st.pyplot(fig)

# ==============================
# SECCI√ìN: SIMULADOR DE PRECIO
# ==============================
st.markdown("## üéØ Simulador de Precio Estimado")

st.markdown("""
Usa los controles para simular un precio estimado de venta basado en el a√±o, 
kilometraje y tipo de veh√≠culo.
""")

col1, col2, col3 = st.columns(3)

with col1:
    year = st.slider("A√±o del modelo", int(
        df["model_year"].min()), int(df["model_year"].max()), 2015)

with col2:
    odometer = st.slider("Kilometraje (millas)", 0, int(
        df["odometer"].max()), 60000, step=5000)

with col3:
    vehicle_type = st.selectbox("Tipo de veh√≠culo", df["type"].unique())

# Modelo simple para simulaci√≥n de precio
base_price = df["price"].mean()
price_est = base_price + \
    (year - df["model_year"].mean()) * 150 - (odometer / 1000) * 20

st.metric(
    label=f"üíµ Precio estimado para un {vehicle_type}", value=f"${price_est:,.0f} USD")


# ==============================
# PIE DE P√ÅGINA
# ==============================
st.markdown("---")
st.caption("""
    Aplicaci√≥n desarrollada para an√°lisis exploratorio de datos de veh√≠culos - Proyecto acad√©mico üß† \n
    Desarrollado por **Inti Romero** \n
    GitHub: [https://github.com/Inbemero-tech]
    """)
